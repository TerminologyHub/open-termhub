buildscript {
  ext {
    springBootVersion = "3.3.11"
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://plugins.gradle.org/m2/" }
    gradlePluginPortal()
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

// This must be at the top of the file (only can be below buildscript)
plugins {
  id "com.github.hierynomus.license" version "0.16.1"
  id 'org.springframework.boot' version '3.3.5'
  id "com.github.spotbugs" version "6.0.26"
  id 'jacoco'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://repo.spring.io/release" }
  maven { url "https://repo.spring.io/milestone" }
  maven { url "https://repo.spring.io/snapshot" }
}

// Plugins
// The dependency management plugin remains a transitive dependency of spring-boot-gradle-plugin
// so there's no need for it to be listed as a classpath dependency in the buildscript configuration.
apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "checkstyle"

group = 'com.wci.open-termhub'
version = '1.1.0-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

//configurations.all {
//   exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
//}

dependencies {
  // NOTE: "spring-boot-starter-web" must be the first dependency
  implementation('org.springframework.boot:spring-boot-starter-web')

  // Add ANTLR runtime dependency to match code generation version
  implementation 'org.antlr:antlr4-runtime:4.13.2'

  // Add JAXB dependencies
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.1'
  implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
  implementation 'javax.xml.bind:jaxb-api:2.3.1'

  // Spring
  implementation 'org.springframework.boot:spring-boot-starter'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

  // Docs: https://docs.spring.io/spring-data/elasticsearch/docs/4.2.12/reference/html/#reference
  implementation 'org.springframework.data:spring-data-elasticsearch:5.3.4'
  implementation 'org.apache.lucene:lucene-core:9.11.1'
  implementation 'org.apache.lucene:lucene-analysis-common:9.11.1'
  implementation 'org.apache.lucene:lucene-queryparser:9.11.1'
  implementation 'org.apache.lucene:lucene-join:9.11.1'
  implementation 'org.apache.lucene:lucene-queries:9.11.1'

  // Security
  implementation 'com.auth0:java-jwt:4.4.0'
  implementation ('com.auth0:jwks-rsa:0.22.1') {
    exclude group: 'com.google.guava', module: 'guava'
  }

  // Other 3rd party Libraries
  implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

  // REST
  implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.0.0'
  implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

  // OpenAPI/Swagger UI - Using HAPI FHIR's built-in support
  implementation 'io.swagger.core.v3:swagger-core:2.2.20'
  implementation 'io.swagger.core.v3:swagger-jaxrs2:2.2.20'
  implementation ('org.webjars:swagger-ui:5.10.3') {
    exclude group: 'org.webjars', module: 'webjars-locator-core'
  }
  implementation 'org.webjars:webjars-locator-core:0.55'

  // Template Engine
  implementation 'org.thymeleaf:thymeleaf:3.1.2.RELEASE'
  implementation 'org.thymeleaf:thymeleaf-spring6:3.1.2.RELEASE'

  implementation 'org.apache.commons:commons-text:1.12.0'
  implementation 'org.apache.commons:commons-lang3:3.17.0'
  implementation 'org.apache.commons:commons-math3:3.6.1'
  implementation 'org.apache.tika:tika-core:2.9.2'
  implementation ('org.apache.tika:tika-parsers:2.9.2') {
    // Avoid conflicts
	exclude group: 'org.apache.cxf', module: 'cxf-rt-rs-client'
	exclude group: 'c3p0', module: 'c3p0'
	exclude group: 'org.ow2.asm'
	exclude group: 'com.google.guava', module: 'guava'
  }
  implementation 'info.debatty:java-string-similarity:2.0.0'
  implementation 'org.reflections:reflections:0.10.2'
  implementation ('com.google.guava:guava:32.1.1-jre') {
	attributes{
	  attribute(Attribute.of('org.gradle.jvm.environment', String),'standard-jvm')
	}
  }
  implementation 'org.apache.logging.log4j:log4j-core'
  implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

  // Jackson dependencies
  implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
  implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.16.1'

  // FHIR libraries
  // The guava exclusion is to avoid things like
  // - ...Could not resolve com.google.guava:guava:32.0.1-jre
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-base:7.6.1") {
     exclude group: "com.google.guava", module: "guava"
     exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
     exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
     exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
  }
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-structures-r4:7.6.1") {
     exclude group: "com.google.guava", module: "guava"
  }
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-server:7.6.1") {
     exclude group: "com.google.guava", module: "guava"
  }
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-jpaserver-base:7.6.1") {
     exclude group: "ca.uhn.hapi.fhir", module: "hapi-fhir-sql-migrate"
     exclude group: "org.elasticsearch.client", module: "elasticsearch-rest-high-level-client"
     exclude group: "org.hibernate.search"
     exclude group: "org.apache.lucene"
     exclude group: "com.github.jsonld-java", module: "jsonld-java"
     exclude group: "com.graphql-java", module: "graphql-java"
     exclude group: "org.glassfish", module: "javax.el"
     exclude group: "org.apache.logging.log4j", module: "log4j-to-slf4j"
     exclude group: "com.google.guava", module: "guava"
     exclude group: "org.apache.jena"
  }
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-server-openapi:7.6.1") {
     exclude group: "com.google.guava", module: "guava"
     exclude group: "org.springdoc", module: "springdoc-openapi-starter-webmvc-ui"
     exclude group: "org.webjars", module: "swagger-ui"
  }
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-structures-dstu2:7.6.1") {
     exclude group: "com.google.guava", module: "guava"
  }
  implementation ("ca.uhn.hapi.fhir:hapi-fhir-validation:7.6.1") {
     exclude group: "com.google.guava", module: "guava"
  }

  // For Test
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.3'
  testImplementation 'org.junit.platform:junit-platform-suite-engine:1.9.3'
}

dependencyManagement {
  dependencies {
    dependency('org.fhir:ucum:1.0.9')
  }
}

// ./gradlew clean test
test {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    maxParallelForks = 1
    exclude '**/r4/**'
    exclude '**/r5/**'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// ./gradlew clean testR4
task testR4(type: Test) {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test-r4'
    include '**/r4/**'
    exclude '**/r5/**'
    maxParallelForks = 1
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// ./gradlew clean testR5
task testR5(type: Test) {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test-r5'
    include '**/r5/**'
    exclude '**/r4/**'
    maxParallelForks = 1
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

}

// use "gradle licenseFormatMain/Test" to automatically generate headers
license {
  header = rootProject.file("config/LICENSE")
  strictCheck true
  encoding = "UTF-8"
  mapping("java", "SLASHSTAR_STYLE")
  includes(["**/*.java"])
  excludes(["**/*.txt", "**/*.conf", "**/*package-info.java", "**/*.properties"])
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
  ext.company = "West Coast Informatics"
}
licenseTest.dependsOn licenseFormatTest
licenseMain.dependsOn licenseFormatMain

// SpotBugs https://spotbugs.readthedocs.io/en/latest/gradle.html
// https://github.com/spotbugs/spotbugs-gradle-plugin
spotbugs {
  ignoreFailures = false
  showStackTraces = true
  showProgress = true
  excludeFilter = file("${rootDir}/config/spotbugs/excludeFilter.xml")
}
spotbugsMain {
    reports {
        html {
            enabled = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
spotbugsTest {
    reports {
        html {
            enabled = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

// Checkstyle
checkstyle {
  toolVersion '10.12.0'
  ignoreFailures = true
  // Path to your Checkstyle configuration file
  configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}
checkstyleMain {
  reports {
    html.destination = file("$buildDir/reports/checkstyle.html")
  }
}
checkstyleTest {
  reports {
    html.destination = file("$buildDir/reports/checkstyle.html")
  }
}


// usage ./gradlew runLoadConcepts -PinputFile=location of concepts JSON file -PbatchSize=1000 -Plimit=1000
// limit is optional, if not present, the entire file will be loaded.  Used for developing.
task runLoadConcepts(type: JavaExec) {
  main = 'com.wci.termhub.loader.ConceptLoader'
  classpath = sourceSets.main.runtimeClasspath
  if (project.hasProperty('inputFile')) {
    args += [project.getProperty('inputFile')]
  }
  if (project.hasProperty('limit')) {
    args += [project.getProperty('limit')]
  }
  if (project.hasProperty('batchSize')) {
    args += [project.getProperty('batchSize')]
  }
  jvmArgs = ['-Xms1G', '-Xmx8G']
}

// usage ./gradlew runLoadConceptRels -PinputFile=location of concepts relationship JSON file -PbatchSize=1000 -Plimit=1000
// limit is optional, if not present, the entire file will be loaded. Used for developing.
task runLoadConceptRels(type: JavaExec) {
  main = 'com.wci.termhub.loader.ConceptRelationshipLoader'
  classpath = sourceSets.main.runtimeClasspath
  if (project.hasProperty('inputFile')) {
    args += [project.getProperty('inputFile')]
  }
  if (project.hasProperty('limit')) {
    args += [project.getProperty('limit')]
  }
  if (project.hasProperty('batchSize')) {
    args += [project.getProperty('batchSize')]
  }
  jvmArgs = ['-Xms1G', '-Xmx8G']
}

tasks.withType(JavaExec) {
  if (System.getProperty('DEBUG', 'false') == 'true') {
    jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
  }
}

tasks.named('bootRun') {
    args = ['--spring.profiles.active=your-profile']
}

bootRun {
    if (project.hasProperty('debug')) {
        jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"]
    }
}

bootJar {
  mainClass = 'com.wci.termhub.Application'
}

jacoco {
  toolVersion = "0.8.11"
}

jacocoTestReport {
  dependsOn test

  reports {
    html {
      required = true
      destination file("${buildDir}/reports/jacoco")
    }
    xml {
      required = true
      destination file("${buildDir}/reports/jacoco/report.xml")
    }
    csv.required = false
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.60
      }
      excludes = [
        'com.wci.termhub.Application',
        'com.wci.termhub.config.*',
        'com.wci.termhub.model.*'
      ]
    }
  }
}

// To enact - ./gradlew dependencies --write-locks
dependencyLocking {
    lockAllConfigurations() // Lock all configurations by default
}

