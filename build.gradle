buildscript {
  ext {
    springBootVersion = "3.3.3"
  }
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.5"
  }
}

// This must be at the top of the file (only can be below buildscript)
plugins {
  id 'org.springframework.boot' version '3.3.3'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'java'
}

group = 'com.wci.open-termhub'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://repo.spring.io/release" }
  maven { url "https://repo.spring.io/milestone" }
  maven { url "https://repo.spring.io/snapshot" }
  maven {
    name "wci-nexus"
    url "https://nexus.personainformatics.com/repository/persona-nexus/"
    credentials {
      username nexusUsername
      password nexusPassword
    }
  }
}

// Plugins
// The dependency management plugin remains a transitive dependency of spring-boot-gradle-plugin
// so thereâ€™s no need for it to be listed as a classpath dependency in the buildscript configuration.
apply plugin: "io.spring.dependency-management"
apply plugin: "org.springframework.boot"
apply plugin: "java"
apply plugin: "eclipse"
// apply plugin: "checkstyle"

configurations.all {
   exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

dependencies {
	  // Spring
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Docs: https://docs.spring.io/spring-data/elasticsearch/docs/4.2.12/reference/html/#reference
	implementation 'org.springframework.data:spring-data-elasticsearch:5.3.3'
	implementation 'org.apache.lucene:lucene-core:9.11.1'
	implementation 'org.apache.lucene:lucene-analysis-common:9.11.1'
	implementation 'org.apache.lucene:lucene-queryparser:9.11.1'

    // Other 3rd party Libraries
	implementation 'javax.persistence:javax.persistence-api:2.2'
	implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'
	implementation 'org.apache.commons:commons-text:1.12.0'
	implementation 'org.apache.commons:commons-lang3:3.16.0'
	implementation 'org.apache.tika:tika-core:2.9.2'
	implementation ('org.apache.tika:tika-parsers:2.9.2') {
    	// Avoid conflicts
		exclude group: 'org.apache.cxf', module: 'cxf-rt-rs-client'
		exclude group: 'c3p0', module: 'c3p0'
		exclude group: 'org.ow2.asm'
		exclude group: 'com.google.guava', module: 'guava'
  	}
	implementation 'info.debatty:java-string-similarity:2.0.0'
	implementation 'org.reflections:reflections:0.10.2'
	implementation ('com.google.guava:guava:32.1.1-jre') {
		attributes{
			attribute(Attribute.of('org.gradle.jvm.environment', String),'standard-jvm')
		}
	}
    implementation 'ch.qos.logback:logback-classic:1.5.7'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

  	// For Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

test {
    useJUnitPlatform()
    exclude '**/*IntegrationTest.*'
}


// To enact - ./gradlew dependencies --write-locks
configurations {
    implementation {
        resolutionStrategy.activateDependencyLocking()
    }
}

//checkstyle {
//    toolVersion = '9.2'
//    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
//    sourceSets = [sourceSets.main]
//    showViolations = true
//}

//checkstyleTest {
//    toolVersion = '9.2'
//    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
//    sourceSets = [sourceSets.test]
//    showViolations = true
//}

//task checkstyle(type: Checkstyle) {
//    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
//    source = sourceSets.main.allJava
//    classpath = sourceSets.main.runtimeClasspath
//}

// usage ./gradlew runLoadConcepts -PinputFile=location of concepts JSON file -PbatchSize=1000 -Plimit=1000
// limit is optional, if not present, the entire file will be loaded.  Used for developing.
task runLoadConcepts(type: JavaExec) {
    main = 'com.wci.termhub.loader.ConceptLoader'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('inputFile')) {
        args += [project.getProperty('inputFile')]
    }
    if (project.hasProperty('limit')) {
        args += [project.getProperty('limit')]
    }
    if (project.hasProperty('batchSize')) {
        args += [project.getProperty('batchSize')]
    }
    jvmArgs = ['-Xms1G', '-Xmx8G']
}

// usage ./gradlew runLoadConceptRels -PinputFile=location of concepts relationship JSON file -PbatchSize=1000 -Plimit=1000
// limit is optional, if not present, the entire file will be loaded. Used for developing.
task runLoadConceptRels(type: JavaExec) {
    main = 'com.wci.termhub.loader.ConceptRelationshipLoader'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('inputFile')) {
        args += [project.getProperty('inputFile')]
    }
    if (project.hasProperty('limit')) {
        args += [project.getProperty('limit')]
    }
    if (project.hasProperty('batchSize')) {
        args += [project.getProperty('batchSize')]
    }
    jvmArgs = ['-Xms1G', '-Xmx8G']
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5555'
    }
}


bootJar {
  mainClass = 'com.wci.termhub.open.Application'
}