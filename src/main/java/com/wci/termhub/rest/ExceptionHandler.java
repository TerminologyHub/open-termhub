/*
 * Copyright 2025 West Coast Informatics - All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains the property of West Coast Informatics
 * The intellectual and technical concepts contained herein are proprietary to
 * West Coast Informatics and may be covered by U.S. and Foreign Patents, patents in process,
 * and are protected by trade secret or copyright law.  Dissemination of this information
 * or reproduction of this material is strictly forbidden.
 */
package com.wci.termhub.rest;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.wci.termhub.util.LocalException;

/**
 * Handles exceptions.
 */
public final class ExceptionHandler {

  /** The logger. */
  private static Logger logger = LoggerFactory.getLogger(ExceptionHandler.class);

  /** The timer. */
  private static Timer timer;

  /** The error map. */
  private static Map<String, Integer> errorMap = new HashMap<>();

  static {
    timer = new Timer();
    timer.scheduleAtFixedRate(new TimerTask() {

      @Override
      public void run() {
        // NOTE: this could cause problems if it happens right when an
        // error is
        // being processed - but then it just won't send that error
        // message.
        errorMap.clear();
      }

    }, new Date(), 8 * 60 * 60 * 1000);
  }

  /**
   * Instantiates an empty {@link ExceptionHandler}.
   */
  private ExceptionHandler() {
    // n/a
  }

  /**
   * Handle exception.
   *
   * @param e the e
   * @param whatIsHappening the what is happening
   * @throws Exception the web application exception
   */
  public static void handleException(final Throwable e, final String whatIsHappening)
    throws Exception {
    handleException(e, whatIsHappening, "");
  }

  /**
   * Handle exception quitely.
   *
   * @param e the e
   * @param whatIsHappening the what is happening
   */
  public static void handleExceptionQuitely(final Throwable e, final String whatIsHappening) {
    try {
      handleException(e, whatIsHappening, "");
    } catch (final Exception e1) {
      logger.error("UNEXPECTED ERROR HANDLING EXCEPTION", e1);
      logger.error("  ORIG EXCEPTION = ", e);
    }
  }

  /**
   * Handle exception. For {@link LocalException} print the stack trace and inform the user with a
   * message generated by the application. For all other exceptions, also send email to
   * administrators with the message and the stack trace.
   *
   * @param e the e
   * @param whatIsHappening the what is happening
   * @param userName the current user
   * @throws Exception the web application exception
   */
  public static void handleException(final Throwable e, final String whatIsHappening,
    final String userName) throws Exception {

    // Log the error
    if (e instanceof LocalException) {
      // Log error and return appropriate RestException
      logger.error("ERROR (LOCAL): " + whatIsHappening, e);
      throw new RestException(true, 500, "Internal Server Error", e.getMessage());
    } else if (e instanceof RestException) {
      logger.error("ERROR (WEB): " + ((RestException) e).getError());
      throw (RestException) e;
    } else {

      // // Send email
      // try {
      // emailException(e, whatIsHappening);
      // } catch (Exception ex) {
      // // Log problem trying to send email and continue
      // logger.error("Unexpected problem trying to send email", ex);
      // }

      // Log error and return appropriate RestException
      logger.error("ERROR: " + whatIsHappening, e);
      throw new RestException(false, 500, "Internal Server Error", e.getMessage());
    }

  }

}
